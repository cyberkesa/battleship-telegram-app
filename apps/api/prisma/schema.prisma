// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  telegramId Int      @unique
  username  String?
  firstName String
  lastName  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  matchesAsPlayerA Match[] @relation("PlayerA")
  matchesAsPlayerB Match[] @relation("PlayerB")
  moves           GameMove[]
  lobbyPlayers    LobbyPlayer[]

  @@map("users")
}

model Match {
  id          String   @id @default(cuid())
  status      String   // 'placing', 'in_progress', 'finished'
  playerAId   String
  playerBId   String
  currentTurn String?  // 'A' or 'B'
  winnerId    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  finishedAt  DateTime?

  // Game state (JSON)
  state       Json

  // Relations
  playerA     User      @relation("PlayerA", fields: [playerAId], references: [id])
  playerB     User      @relation("PlayerB", fields: [playerBId], references: [id])
  moves       GameMove[]
  lobbies     Lobby[]

  @@map("matches")
}

model GameMove {
  id       String   @id @default(cuid())
  matchId  String
  playerId String
  x        Int
  y        Int
  result   String   // 'hit', 'miss', 'sunk'
  createdAt DateTime @default(now())

  // Relations
  match    Match    @relation(fields: [matchId], references: [id])
  player   User     @relation(fields: [playerId], references: [id])

  @@map("game_moves")
}

model Lobby {
  id         String   @id @default(cuid())
  status     String   // 'waiting', 'ready', 'playing', 'finished'
  inviteLink String
  matchId    String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  players    LobbyPlayer[]
  match      Match?   @relation(fields: [matchId], references: [id])

  @@map("lobbies")
}

model LobbyPlayer {
  id       String @id @default(cuid())
  lobbyId  String
  playerId String
  name     String
  avatar   String?
  isReady  Boolean @default(false)
  isHost   Boolean @default(false)

  // Relations
  lobby    Lobby   @relation(fields: [lobbyId], references: [id], onDelete: Cascade)
  player   User    @relation(fields: [playerId], references: [id])

  @@map("lobby_players")
}
